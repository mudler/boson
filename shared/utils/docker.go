package utils

import (
	"bufio"
	"github.com/fsouza/go-dockerclient"
	"io"
	"os"
)

func Attach(client *docker.Client, container *docker.Container) error {
	r, w := io.Pipe()
	options := docker.AttachToContainerOptions{
		Container:    container.ID,
		OutputStream: w,
		ErrorStream:  w,
		Stream:       true,
		Stdout:       true,
		Stderr:       true,
		Logs:         true,
	}
	log.Info("Attaching to container " + container.ID)
	go client.AttachToContainer(options)
	go func(reader io.Reader, container *docker.Container) {
		scanner := bufio.NewScanner(reader)
		for scanner.Scan() {
			log.Info("%s%s \n", container.ID, scanner.Text())
		}
		if err := scanner.Err(); err != nil {
			log.Error("There was an error with the scanner in attached container", err)
		}
	}(r, container)
	return nil
}

// Deploy a container  wich option are specified by config. Optional arguments are passed, typicallyf autogenerated by processor/preprocessor
func ContainerDeploy(config *Config, args []string, volumes []string, head string) (bool, error) {
	endpoint := "unix:///var/run/docker.sock"
	client, _ := docker.NewClient(endpoint)
	DockerImage := config.DockerImage
	log.Info("Pulling image: %s\n", DockerImage)

	if err := client.PullImage(docker.PullImageOptions{Repository: DockerImage}, docker.AuthConfiguration{}); err != nil {
		log.Error("error pulling %s image: %s\n", DockerImage, err)
		return false, err
	}
	combinedArgs := append(args, config.Args...)

	container, err := client.CreateContainer(docker.CreateContainerOptions{
		Config: &docker.Config{
			Image: DockerImage,
			Cmd:   combinedArgs,
			Env:   config.Env,
		},
	})
	Attach(client, container)
	// Cleanup when done
	defer func() {
		client.RemoveContainer(docker.RemoveContainerOptions{
			ID:    container.ID,
			Force: true,
		})
	}()
	if err != nil {
		log.Error(err.Error())
	}
	log.Info("Starting container: " + container.ID)
	volumes = append(volumes, config.Volumes...)
	err = client.StartContainer(container.ID, &docker.HostConfig{Binds: volumes, LogConfig: docker.LogConfig{Type: "json-file"}})
	if err != nil {
		log.Error(err.Error())
		return false, err
	}
	status, err := client.WaitContainer(container.ID)
	container, err = client.InspectContainer(container.ID) // update our container information
	if err != nil {
		log.Error(err.Error())
	}

	logfile := config.LogDir + "/" + head + ".json"
	log.Debug("Copying " + container.LogPath + " to " + logfile)
	err = CopyFile(container.LogPath, logfile)
	os.Chmod(logfile, os.FileMode(config.LogPerm))
	if err != nil {
		log.Error(err.Error())
	}

	if status == int(0) {
		return true, err
	} else {
		return false, err
	}
}
